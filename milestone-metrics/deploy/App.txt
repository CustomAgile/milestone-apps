<!DOCTYPE html>
<html>
<head>
    <title>Milestone Metrics</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Thu Jun 23 2016 09:30:09 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Jun 23 2016 09:30:09 GMT-0700 (PDT)";
        var CHECKSUM = 30736017761;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("milestone-metrics", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'selection_box', layout: {type: 'hbox'}, padding: 10, flex: 1},
        {xtype:'container',itemId:'display_box'}
    ],
    artifactFetch: [
        'ObjectID',
        'FormattedID',
        'Name',
        'ScheduleState',
        'Iteration',
        'Project',
        'PlannedVelocity',
        'PlanEstimate',
        'LastVerdict',
        'State',
        'Requirement',
        'WorkProduct',
        'StartDate',
        'EndDate'
    ],
    unscheduledIterationName: "Unscheduled",
    config: {
        defaultSettings: {
            closedDefectStates: ['Closed'],
            storiesOnlyForAccepted: true
        }
    },

    launch: function() {
        this.fetchScheduleStates().then({
            success: function(states){
                this.scheduleStates = states;
                this._addSelectors();
            },
            failure: function(msg){
                Rally.ui.notify.Notifier.showError({message: msg});
            },
            scope: this
        });

    },
    _addSelectors: function(){
        this.down('#selection_box').removeAll();

        var filters = Ext.create('Rally.data.wsapi.Filter',{
            property: 'Projects',
            operator: 'contains',
            value: this.getContext().getProject()._ref
        });
        filters = filters.or({
            property: 'TargetProject',
            value: null
        });

        this.milestoneSelector = this.down('#selection_box').add({
            xtype: 'rallymilestonecombobox',
            stateful: true,
            stateId: this.getContext().getScopedStateId('milestone-cb'),
            width: 200,
            fieldLabel: 'Milestone',
            labelAlign: 'right',
            context: this.getContext(),
            storeConfig: {
                filters: filters,
                remoteFilter: true
            }
        });

        this.milestoneInformation = this.down('#selection_box').add({
            xtype: 'container',
            itemId: 'milestone-information',
            flex: 1
        });

        this.iterationFilter = this.down('#selection_box').add({
            xtype: 'rallyiterationcombobox',
            fieldLabel: 'Filter by Iteration',
            labelAlign: 'right',
            allowClear: true,
            getDefaultValue: function() {
                return null;
            },
            width: 300
        });
        this.milestoneSelector.on('change', this._update, this);
        this.iterationFilter.on('change', this._filterIteration, this);

    },
    _updateMilestoneInformation: function(){
        var recData = this.milestoneSelector.getRecord() && this.milestoneSelector.getRecord().getData();

        if (recData){
            var targetDate = recData.TargetDate,
                days = null,
                html = '<span style="color:red;">No target date set for milestone</span>';

            if (targetDate){
                days = Rally.util.DateTime.getDifference(Rally.util.DateTime.fromIsoString(targetDate),new Date(), 'day'),
                targetDate = Rally.util.DateTime.formatWithDefault(Rally.util.DateTime.fromIsoString(targetDate));

                if (days >= 0){
                    html = Ext.String.format('Target Date: {0} ({1} days remaining)', targetDate,days);
                } else {
                    html = Ext.String.format('<span style="color:red;">Target Date: {0} ({1} days past target date)</span>', targetDate, days*(-1));
                }
            }
            this.logger.log('_update', html);

            this.milestoneInformation.update(Ext.String.format('<div class="selector-msg">{0}</div>', html));
        }
    },
    _update: function(){
        this._updateMilestoneInformation();

        if (this.grid){
            this.grid.destroy();
        }
        this._fetchMilestoneArtifacts(this.milestoneSelector.getRecord().get('_ref'))
    },
    _getFilters: function(){
        var milestoneRef = this.milestoneSelector.getRecord().get('_ref'),
            iteration = this.iterationFilter.getRecord();

        this.logger.log('_getFilters', milestoneRef, iteration, iteration && iteration.get('Name'));

        var filters = Ext.create('Rally.data.wsapi.Filter',{
            property: 'Milestones',
            value: milestoneRef
        });

        filters = filters.or({
            property: 'Requirement.Milestones',
            value: milestoneRef
        });

        filters = filters.or({
            property: 'WorkProduct.Milestones',
            value: milestoneRef
        });

        this.logger.log('_getFilters', filters.toString());
        return filters;

    },
    _fetchMilestoneArtifacts: function(milestoneRef){

        var filters = this._getFilters();

        var models =  ['Defect', 'DefectSuite', 'UserStory','TestCase'];
        var store = Ext.create('Rally.data.wsapi.artifact.Store', {
            models: models,
            filters: filters,
            limit: 'Infinity',
            context: {
                project: this.getContext().getProject()._ref,
                projectScopeDown: true,
                projectScopeUp: false
            },
            fetch: this.artifactFetch
        });
        store.load({
            callback: function(records, operation){
                this.logger.log('store loaded', records, operation);
                if (operation.wasSuccessful()){
                    this._displayMilestoneMetrics(records);
                } else {
                    Rally.ui.notify.Notifier.showError({message: 'Error loading Artifacts: ' + operation.error.errors.join(',')});
                }
            },
            scope: this
        });
    },
    _filterIteration: function(cb){

        if (this.grid && this.grid.store){
            this.grid.store.clearFilter();
            if (cb.getRecord()){
                this.grid.store.filter([{
                    property: 'iteration',
                    value: cb.getRecord().get('Name')
                }]);
            }
        }

    },
    _displayMilestoneMetrics: function(records) {

        var iterationHash = this._aggregateRecordsByIteration(records);

        var data = this._mungeData(iterationHash);
        this.logger.log('_displayMilestoneMetrics',data);

        var store = Ext.create('Rally.data.custom.Store',{
            data: data,
            fields: ['iteration',
                'startDate',
                'endDate',
                'project',
                'acceptedCount',
                'totalCount',
                'plannedVelocity',
                'pctPlannedVelocity',
                'acceptedPoints',
                'pctAccepted',
                'remaining',
                'totalPoints',
                'passedTestCount',
                'testCount',
                'activeDefects',
                'totalDefects']
        });


        if (this.grid){
            this.grid.destroy();
        }

       this.grid = Ext.create('Rally.ui.grid.Grid',{
            store: store,
            columnCfgs: this._getColumns()
        });
        this.add(this.grid);

        if (this.iterationFilter.getValue()){
            this._filterIteration(this.iterationFilter);
        }

    },
    
    _getColumns: function() {
        var total_count_title = 'Total Work Item Count';
        var acceptance_count_title = 'Accepted Work Item Count';
        if ( this.getSetting('storiesOnlyForAccepted') ) {
            total_count_title = 'Total User Stories';
            acceptance_count_title = 'Accepted User Story Count';
        }
        var columns =  [
            {text: 'Iteration', dataIndex: 'iteration', flex:2, align: 'left', renderer: this._styleRenderer},
            {text: 'Start Date', dataIndex: 'startDate', flex:1, align: 'left', renderer: this._dateRenderer},
            {text: 'End Date', dataIndex: 'endDate', flex:1, align: 'left', renderer: this._dateRenderer},
            {text: 'Project', dataIndex: 'project', flex: 3, align: 'left', renderer: this._styleRenderer},
            {text: total_count_title, flex: 1, dataIndex: 'totalCount', align: 'center', renderer: this._styleRenderer},
            {text: acceptance_count_title, flex: 1, dataIndex: 'acceptedCount', align: 'center', renderer: this._styleRenderer},
            {text: '% Accepted', flex: 1, dataIndex: 'pctAccepted', align: 'center', renderer: this._pctRenderer},
            {text: 'Accepted Points', flex: 1, dataIndex: 'acceptedPoints', align: 'center', renderer: this._styleRenderer},
            {text: 'Remaining Points', flex: 1, dataIndex: 'remaining', align: 'center', renderer: this._styleRenderer},
            {text: 'Total Points', flex: 1, dataIndex: 'totalPoints', align: 'center', renderer: this._styleRenderer},
            /*{text: '% Planned Velocity', flex: 1, dataIndex: 'pctPlannedVelocity', align: 'center', renderer: this._pctRenderer},*/
            {text: 'Planned Velocity / %', flex: 1, dataIndex: 'pctPlannedVelocity', align: 'center', scope: this, renderer: this._pctRendererForPV},
            {text: 'Passed Tests', flex: 1, dataIndex: 'passedTestCount', align: 'center', renderer: this._styleRenderer},
            {text: 'Total tests', flex: 1, dataIndex: 'testCount', align: 'center', renderer: this._styleRenderer},
            {text: 'Active Defects', flex: 1, dataIndex: 'activeDefects', align: 'center', renderer: this._styleRenderer},
            {text: 'Total Defects', flex: 1, dataIndex: 'totalDefects', align: 'center', renderer: this._styleRenderer}
        ];
        return columns;
    },
    
    _styleRenderer: function(v,m,r){
        if (r.get('iteration') === 'Total'){
            m.tdCls = "summary-row";
        }
        return v;
    },
    _pctRenderer: function(v,m,r){
        if (r.get('iteration') === 'Total'){
            m.tdCls = "summary-row";
        }
        if (v >= 0){
            return (v * 100).toFixed(1) + ' %';
        }
        return '';
    },
    
    _pctRendererForPV: function(v,m,r){
        var pct = this._pctRenderer(v,m,r);
        var pv = r.get('plannedVelocity') || 0;
        return Ext.String.format("{0} / {1}", pv, pct);
    },
    
    _dateRenderer: function(v,m,r){
        if (r.get('iteration') === 'Total'){
            m.tdCls = "summary-row";
        }
        if (v){
            return Rally.util.DateTime.formatWithDefault(Rally.util.DateTime.fromIsoString(v));
        }
        return '';
    },
    _mungeData: function(iterationHash){
        var data = [];

        _.each(iterationHash, function(records, oid){
            var row = this._getStatistics(records);

            row.iteration = records[0].get('Iteration') && records[0].get('Iteration').Name;
            row.project = records[0].get('Project').Name;
            row.startDate = (records[0].get('Iteration') && records[0].get('Iteration').StartDate) || '';
            row.endDate = (records[0].get('Iteration') && records[0].get('Iteration').EndDate) || '';
            row.plannedVelocity = (records[0].get('Iteration') && records[0].get('Iteration').PlannedVelocity) || '';
            row.pctPlannedVelocity = row.plannedVelocity ? row.totalPoints/row.plannedVelocity : 0;
            row.pctAccepted =  row.totalPoints > 0 ? row.acceptedPoints/row.totalPoints : 0;
            row.remaining =  row.totalPoints - row.acceptedPoints;
            
            data.push(row);
        }, this);

        data.push(this._getTotalRow(data));
        this.logger.log('_mungeData', data);
        return data;
    },
    _getTotalRow: function(data){
        var totalRow = {
            iteration: 'Total',
            project: '',
            startDate: '',
            endDate: '',
            plannedVelocity: 0,
            pctPlannedVelocity: 0,
            remaining: 0,
            acceptedCount: 0,
            acceptedPoints: 0,
            totalCount: 0,
            totalPoints: 0,
            totalDefects: 0,
            activeDefects: 0,
            testCount: 0,
            passedTestCount: 0,
            pctAccepted: 0
        };

        _.each(data, function(row){
            totalRow.plannedVelocity += row.plannedVelocity || 0;
            totalRow.acceptedCount += row.acceptedCount || 0;
            totalRow.acceptedPoints += row.acceptedPoints || 0;
            totalRow.totalCount += row.totalCount || 0;
            totalRow.totalPoints += row.totalPoints || 0;
            totalRow.totalDefects += row.totalDefects || 0;
            totalRow.activeDefects += row.activeDefects || 0;
            totalRow.testCount += row.testCount || 0;
            totalRow.passedTestCount += row.passedTestCount || 0;
        });
        totalRow.remaining = totalRow.totalPoints - totalRow.acceptedPoints;
        totalRow.pctAccepted = totalRow.totalPoints ? totalRow.acceptedPoints/totalRow.totalPoints : 0;
        totalRow.pctPlannedVelocity = totalRow.plannedVelocity ? totalRow.totalPoints/totalRow.plannedVelocity : 0;
        return totalRow;
    },
    _getClosedDefectStates: function(){
        this.logger.log('_getClosedDefectStates',this.getSetting('closedDefectStates'));
        var states = this.getSetting('closedDefectStates');
        if (Ext.isString(states)){
            states = states.split(',');
        }
        return states;
    },
    _getAcceptedScheduleStates: function(){
        return this.scheduleStates.slice(this.scheduleStates.indexOf('Accepted'));
    },
    _getPassedTestValues: function(){
        return ['Passed'];
    },
    _getStatistics: function(records){
        var me = this,
            acceptedStates = this._getAcceptedScheduleStates(),
            closedDefectStates = this._getClosedDefectStates(),
            passedValues = this._getPassedTestValues(),
            acceptedCount = 0,
            acceptedPoints = 0,
            totalPoints = 0,
            totalDefects = 0,
            activeDefects = 0,
            testCount = 0,
            passedTestCount = 0,
            totalCount = 0;

        _.each(records, function(r){
            if ( ! me.getSetting('storiesOnlyForAccepted') || r.get('_type') === 'hierarchicalrequirement' ) {
                if (r.get('ScheduleState') && Ext.Array.contains(acceptedStates, r.get('ScheduleState'))){
                    acceptedCount++;
                    acceptedPoints += r.get('PlanEstimate') || 0;
                }
                totalPoints += r.get('PlanEstimate') || 0;
                totalCount++;
            }
            
            if (r.get('_type') === 'defect'){
                totalDefects++;
                if (!Ext.Array.contains(closedDefectStates, r.get('State'))){
                    activeDefects ++;
                }
            }

            if (r.get('_type') === 'testcase'){
                testCount++;
                if (Ext.Array.contains(passedValues, r.get('LastVerdict'))){
                    passedTestCount++;
                }
            }
        });

        return {
            acceptedCount: acceptedCount,
            acceptedPoints: acceptedPoints,
            totalCount: totalCount,
            totalPoints: totalPoints,
            totalDefects: totalDefects,
            activeDefects: activeDefects,
            testCount: testCount,
            passedTestCount: passedTestCount
        };
    },

    _aggregateRecordsByIteration: function(records){
        var hash = {};
        _.each(records, function(r){
            var val = r.get('Iteration');

            if (val){
                val = val.ObjectID;
            } else {
                val = r.get('Requirement') || r.get('WorkProduct');
                if (val){
                    val = val.Iteration && val.Iteration.ObjectID || null;
                }
            }
            if (val){
                this.logger.log('_aggregate', val, r);
                if (val === null){
                    val = "Unscheduled";
                }
                if (!hash[val]){
                    hash[val] = [];
                }
                hash[val].push(r);

            }
                    }, this);
        return hash;
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    getSettingsFields: function(){
        return Rally.technicalservices.Settings.getFields();
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this._addSelectors();
    },
    fetchScheduleStates: function(){
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.ModelFactory.getModel({
            type: 'HierarchicalRequirement',
            success: function(model) {
                var field = model.getField('ScheduleState');
                field.getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        if (success){
                            var values = [];
                            for (var i=0; i < records.length ; i++){
                                values.push(records[i].get('StringValue'));
                            }
                            deferred.resolve(values);
                        } else {
                            deferred.reject('Error loading ScheduleState values for User Story:  ' + operation.error.errors.join(','));
                        }
                    },
                    scope: this
                });
            },
            failure: function() {
                var error = "Could not load schedule states";
                deferred.reject(error);
            }
        });
        return deferred.promise;
    }
});

(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * A ComboBox for choosing a milestone
     *
     *     @example
     *     Ext.create('Ext.Container', {
     *         items: [{
     *             xtype: 'rallymilestonecombobox'
     *          }],
     *          renderTo: Ext.getBody().dom
     *     });
     */
    Ext.define('Rally.ui.combobox.MilestoneComboBox', {
        extend: 'Rally.ui.combobox.ComboBox',
        alias: 'widget.rallymilestonecombobox',
        requires: [
            'Rally.util.DateTime',
            'Rally.data.util.Sorter'
        ],

        mixins: [
            'Rally.ui.MilestoneListHeadings'
        ],

        config: {
            allowNoEntry: false,
            hideLabel: true,
            width: 300,
            storeConfig: {
                autoLoad: true,
                model: Ext.identityFn('milestone'),
                remoteFilter: false,
                remoteSort: false,
                limit: Infinity
            },
            listConfig: {
                minWidth: 385,
                cls: 'milestone-list',
                emptyText: 'No Milestones Defined'
            },
            tpl: Ext.create('Ext.XTemplate',
                '<tpl for=".">',
                '<div class="' + Ext.baseCSSPrefix + 'boundlist-item">' +
                '<div class="milestone-name"><b>{[values.FormattedID]}</b>:  {[values._refObjectName]}</div>',
                '<div class="milestone-date">{[Rally.util.DateTime.formatWithDefault(values.TargetDate)]}</div>',
                '<div class="milestone-raw-date">{[values.TargetDate]}</div>',
                '</div>',
                '</tpl>'
            )
        },

        initComponent: function () {
            this.storeConfig.sorters = [{
                sorterFn: Rally.data.util.Sorter.getDefaultSortFn('Milestone')
            }];
            this.callParent(arguments);
        },

        createPicker: function() {
            var picker = this.callParent(arguments);

            picker.on({
                show: this._addListHeaders,
                refresh: this._addListHeaders,
                scope: this,
                filterSelectedNodes: false
            });

            return picker;
        }
    });
})();
Ext.define('Rally.technicalservices.Settings',{
    singleton: true,
    getFields: function(){
        var fields = [];



        fields.push({ 
            name: 'storiesOnlyForAccepted',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: '0 0 25 25',
            boxLabel: 'Stories Only<br/><span style="color:#999999;"><i>Tick to exclude defects, test cases, and defect suites from acceptance calculations</i></span>'
        },
        {
            name: 'closedDefectStates',
            xtype: 'rallyfieldvaluecombobox',
            width: 400,
            labelWidth: 150,
            labelAlign: 'right',
            multiSelect: true,
            fieldLabel: 'Inactive Defect States',
            emptyText : "Select Inactive States...",
            model: 'defect',
            field: 'State',
            listConfig : {
                getInnerTpl : function() {
                    return '<div class="x-combo-list-item"><img src="" class="chkCombo-default-icon chkCombo" /> {displayName} </div>';
                }
            }
        });

        return fields;
    }
});

(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * @private
     * Rally.ui.grid.feature.SummaryRow
     *
     * Creates summary row below grid headers and before grid body (modified from Ext.grid.feature.SummaryView)
     *
     */

    Ext.define('Rally.ui.grid.feature.SummaryRow', {
        extend: 'Ext.grid.feature.AbstractSummary',
        alias: 'feature.summaryrow',

        dockedSummaryCls: Ext.baseCSSPrefix + 'docked-summary',
        panelBodyCls: Ext.baseCSSPrefix + 'summary-',
        scrollPadProperty: 'padding-right',
        dock: 'top',

        init: function(grid) {
            var me = this;
            this.grid = grid;

            this.callParent(arguments);

            grid.headerCt.on({
                afterlayout: this.updateSummaryRow,
                scope: this
            });

            // Stretch the innerCt of the summary bar upon headerCt layout
            grid.headerCt.afterComponentLayout = Ext.Function.createSequence(grid.headerCt.afterComponentLayout, function() {
                var width = this.getFullWidth(),
                    innerCt = me.summaryBar.innerCt,
                    scrollWidth;

                if (grid.getView().hasVerticalScroll()) {
                    scrollWidth = Ext.getScrollbarSize().width;
                    width -= scrollWidth;
                    innerCt.down('table').setStyle(me.scrollPadProperty, scrollWidth + 'px');
                }
                innerCt.setWidth(width);
            });

            grid.on({
                beforerender: {
                    fn: this._onGridBeforeRender,
                    single: true
                },
                afterrender: {
                    fn: this._onGridAfterRender,
                    single: true
                },
                afterproxyload: {
                    fn: this._afterProxyLoad,
                    single: true
                },
                scope: this
            });

            grid.mon(grid.store, 'beforeload', this._onStoreBeforeLoad, this);

        },

        updateSummaryRow: function() {
            var view = this.grid.getView(),
                record = this._createSummaryRecord(view),
                newRowDom = view.createRowElement(record, -1),
                oldRowDom, partner,
                p;

            if (!view.rendered) {
                return;
            }

            oldRowDom = this.summaryBar.el.down('.' + this.summaryRowCls, true);
            console.log('oldRowDom',oldRowDom);
            if (oldRowDom) {
                p = oldRowDom.parentNode;
                p.insertBefore(newRowDom, oldRowDom);
                p.removeChild(oldRowDom);

                partner = this.lockingPartner;
                // For locking grids...
                // Update summary on other side (unless we have been called from the other side)
                if (partner && partner.grid.rendered && !this.calledFromLockingPartner) {
                    partner.calledFromLockingPartner = true;
                    partner.updateSummaryRow();
                    partner.calledFromLockingPartner = false;
                }
            }
            this._onColumnHeaderLayout();
        },

        getSummary: function(store, type, field) {
            var data = store.getData(),
                sum=0;

            _.each(data.items, function(i){
                var val = i.data[field];
                if (val){
                    sum += val || 0;
                }
            });
            return sum;
        },

        _afterProxyLoad: function() {
            this._resumeRequestsForSummaryRowData();
            this.updateSummaryRow();

            this.grid.store.on('insert', function(store, record){this._onStoreInsertUpdateOrRemove(store, record, 'insert');}, this);
            this.grid.store.on('update', function(store, record){this._onStoreInsertUpdateOrRemove(store, record, 'update');}, this);
            this.grid.store.on('remove', function(store, record){this._onStoreInsertUpdateOrRemove(store, record, 'remove');}, this);

            this.grid.on('storebeforefilter', this._onStoreBeforeFilter, this);
            this.grid.on('storeafterbusupdate', this._onAfterBusUpdate, this);
            this.grid.on('pagingtoolbarbeforechange', this._onPagingToolbarBeforeChange, this);
        },

        _isChildNodeWithSummaryColumnChange: function(record, column, checkRecordModified){
            var isChildNodeWithThisColumnUpdate = false;

            if (!this.grid.store.isRootNode(record)) {
                var typeMappings = record.getArtifactMappings();
                if (typeMappings) {
                    _.each(typeMappings, function(value, key) {
                        if (value === column) {
                            var hasUpdate = checkRecordModified ? record.isModified(key) : this._isNodeWithSummaryColumnChange(record, key, false);
                            if (hasUpdate) {
                                isChildNodeWithThisColumnUpdate = true;
                                return false;
                            }
                        }
                    }, this);
                }
            }

            return isChildNodeWithThisColumnUpdate;
        },

        _isNodeWithSummaryColumnChange: function(record, column, checkRecordModified) {
            if (checkRecordModified) {
                return record.isModified(column);
            } else {
                return _.isNumber(record.get(column)) && record.get(column) > 0;
            }
        },

        _onStoreInsertUpdateOrRemove: function(store, record, action){
            var actionMappings = {
                insert: {
                    event: 'storeafterbuscreate',
                    checkRecordModified: false
                },
                update: {
                    event: 'storeafterbusupdate',
                    checkRecordModified: true
                },
                remove: {
                    event: 'storeafterbusremove',
                    checkRecordModified: false
                }
            };

            _.each(this.grid.summaryColumns, function(column){
                if (this._isNodeWithSummaryColumnChange(record, column.field, actionMappings[action].checkRecordModified) ||
                    this._isChildNodeWithSummaryColumnChange(record, column.field, actionMappings[action].checkRecordModified)) {
                    this.grid.on(actionMappings[action].event, this._onStoreDataChanged, this, {single: true});
                    return false;
                }
            }, this);
        },

        _onStoreBeforeFilter: function() {
            this.grid.on('afterproxyload', this.updateSummaryRow, this, {single: true});
        },

        _isNotTreeGridEditor: function(cmp) {
            return cmp && cmp.cmp && cmp.cmp.id !== this.grid.id;
        },

        _isOldEditor: function(cmp) {
            return _.isEmpty(cmp);
        },

        _onAfterBusUpdate: function(store, records, associatedRecords, cmp) {
            if (this._isOldEditor(cmp) || this._isNotTreeGridEditor(cmp)) {
                this._onStoreDataChanged();
            }
        },

        _onPagingToolbarBeforeChange: function() {
            this._suspendRequestsForSummaryRowData();
            this.grid.on('afterproxyload', this._resumeRequestsForSummaryRowData, this, {single: true});
        },

        _resumeRequestsForSummaryRowData: function() {
            this._shouldUpdateSummaryRow = true;
        },

        _suspendRequestsForSummaryRowData: function() {
            this._shouldUpdateSummaryRow = false;
        },

        _onStoreBeforeLoad: function(store, operation) {
            if (store.isRootNode(operation.node)) {
                this._loadOperation = operation;
            }
        },

        _onGridBeforeRender: function() {
            var view = this.grid.getView();

            var tableCls = [this.summaryTableCls];
            if (view.columnLines) {
                tableCls[tableCls.length] = view.ownerCt.colLinesCls;
            }
            this.summaryBar = this.grid.addDocked({
                childEls: ['innerCt'],
                renderTpl: [
                    '<div id="{id}-innerCt" role="presentation">',
                    '<table cellPadding="0" cellSpacing="0" class="' + tableCls.join(' ') + '">',
                    '<tr class="' + this.summaryRowCls + '"></tr>',
                    '</table>',
                    '</div>'
                ],
                style: 'overflow:hidden',
                itemId: 'summaryBar',
                cls: [ this.dockedSummaryCls, this.dockedSummaryCls + '-' + this.dock ],
                xtype: 'component',
                dock: this.dock,
                weight: 10000000
            })[0];
        },

        _onGridAfterRender: function() {
            var view = this.grid.getView();
            this.grid.body.addCls(this.panelBodyCls + this.dock);
            view.mon(view.el, {
                scroll: this._onViewScroll,
                scope: this
            });
        },

        _onStoreDataChanged: function() {
            if (this._loadOperation) {
                if (this._shouldUpdateSummaryRow) {
                    var readOperation = Ext.create('Ext.data.Operation', {
                        action: 'read',
                        params: Ext.clone(this._loadOperation.params)
                    });

                    readOperation.params.pagesize = 1;
                    readOperation.params.start = 1;
                    this.grid.store.getProxy().read(readOperation, this._afterProxyRead, this);
                } else {
                    this._resumeRequestsForSummaryRowData();
                }
            }
        },

        _afterProxyRead: function(op) {
            if (op.success && op.resultSet.sums) {
                this.grid.store.setSums(op.resultSet.sums);
                this.updateSummaryRow();
            }
        },

        _onViewScroll: function() {
            this.summaryBar.el.dom.scrollLeft = this.grid.getView().el.dom.scrollLeft;
        },

        _createSummaryRecord: function(view) {
            var columns = view.headerCt.getVisibleGridColumns(),
                summaryRecord = this.summaryRecord || (this.summaryRecord = Ext.create(this.grid.store.model, view.id + '-summary-record'));

            summaryRecord.beginEdit();

            _.each(columns, function(column){
                // In summary records, if there's no dataIndex, then the value in regular rows must come from a renderer.
                // We set the data value in using the column ID.
                if (!column.dataIndex) {
                    column.dataIndex = column.id;
                }

                summaryRecord.set(column.dataIndex, this.getSummary(this.grid.store, column.summaryType, column.dataIndex));
            }, this);

            summaryRecord.endEdit(true);
            summaryRecord.commit(true); // It's not dirty
            summaryRecord.isSummary = true;

            return summaryRecord;
        },

        // Synchronize column widths in the docked summary Component
        _onColumnHeaderLayout: function() {
            var view = this.grid.getView(),
                columns = view.headerCt.getVisibleGridColumns(),
                summaryEl = this.summaryBar.el,
                el;

            _.each(columns, function(column){
                el = summaryEl.down(view.getCellSelector(column));
                if (el) {
                    if (column.hidden) {
                        el.setDisplayed(false);
                    } else {
                        el.setDisplayed(true);
                        el.setWidth(column.width || (column.lastBox ? column.lastBox.width : 100));
                    }
                }
            }, this);
        }
    });
})();
            
               Rally.launchApp('milestone-metrics', {
                   name: 'Milestone Metrics'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.summary-row {
    text-transform: uppercase;
    font-weight: bolder;
}
.selector-msg {
    color: #222222;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    font-size: 12px;
    margin-top: 0px;
    margin-left: 15px;
    display: inline-block;
}
    </style>

</head>
<body></body>
</html>